buildscript {
    repositories {
      jcenter()
   }

   dependencies {
      classpath 'org.ajoberstar:gradle-git:1.4.0-rc.1'
   }
}

apply plugin: 'maven-publish'

import org.ajoberstar.grgit.*

project.ext.repo = Grgit.open(projectDir)

version = '0.7.10'

project.ext.fullVersion = version
project.ext.vcsUrl = "https://github.com/ihmcrobotics/ihmc-open-robotics-software"
project.ext.snapshotCounter = 1
project.ext.releaseCandidateCounter = 1

getDate()

if (buildType.equals("NIGHTLY")) {
   project.ext.fullVersion = version += "-NIGHTLY+date.${project.ext.date}.rev.${repo.head().abbreviatedId}"
}

if (buildType.equals("LOCAL")) {
   project.ext.fullVersion = "LOCAL"
}

if (buildType.equals("SNAPSHOT")) {
   project.ext.fullVersion = version += "-SNAPSHOT${project.ext.snapshotCounter}.rev.${repo.head().abbreviatedId}"
}

if (buildType.equals("RC")) {
   project.ext.fullVersion = version += "-RC${project.ext.releaseCandidateCounter}.rev.${repo.head().abbreviatedId}"
}

if (buildType.equals("RELEASE")) {
   if (!project.ext.repo.branch.current.name.equals("master")) {
      throw new GradleException("Cannot make RELEASE build from branch \"${project.ext.repo.branch.current.name}\", it is not the branch used for stable releases!")
   }
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven {
        url "https://bengal.ihmc.us/nexus/content/repositories/thirdparty/"
    }
}

task performRelease(type: GradleBuild) {
   if (!buildType.equals("RELEASE")) {
      return
   }
   buildFile "build.gradle"
   startParameter gradle.startParameter
   tasks = ["bintrayUpload", ":RobotDataCommunication:publishLoggerDistributionToBintray"]
}

task publishAllToMavenLocal(type: GradleBuild) {
   buildFile "build.gradle"
   def allTasks = new ArrayList<String>()

   subprojects.each { subproject ->
      allTasks.add(":" + subproject.name + ":publishToMavenLocal")
   }

   tasks = allTasks
}

gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
   if (graph.hasTask(publishAllToMavenLocal)) {
      buildType = "LOCAL"
      project.ext.fullVersion = "LOCAL"

      subprojects.each { subproject ->
         subproject.ext.fullVersion = "LOCAL"
      }
   }

   if (graph.hasTask(performRelease)) {
      if (!buildType.equals("RELEASE")) {
         throw new GradleException("Cannot perform release unless -PbuildType=RELEASE")
      }
   }
}

subprojects { subproject ->

   apply plugin: 'maven-publish'
   apply plugin: 'java'
   
   subproject.ext {
      getOpenRoboticsSoftwareProject = {
         if (subproject.getParent().name.equals(rootProject.name)) {
            return rootProject
         } else {
            return project(':IHMCOpenRoboticsSoftware')
         }
      }

      getOpenRoboticsSoftwareGradlePath = {
         if (subproject.getParent().name.equals(rootProject.name)) {
            return ""
         } else {
            return ":IHMCOpenRoboticsSoftware"
         }
      }

      task copyNonJavaFilesFromSrc(type: Copy, dependsOn: assemble) {
         description 'Copy resources in the src folder instead of the resource folder in to the output dir'
         FileTree tree = fileTree(dir: 'src', exclude: '**/*.java')
         from tree
         into "$buildDir/classes/main"
      }

      task copyNonJavaFilesFromTest(type: Copy, dependsOn: assemble) {
         description 'Copy resources in the test folder instead of the resource folder in to the output dir'
         FileTree tree = fileTree(dir: 'test', exclude: '**/*.java')
         from tree
         into "$buildDir/classes/test"
      }

      test {
         dependsOn copyNonJavaFilesFromSrc, copyNonJavaFilesFromTest

         doFirst {
            boolean enableRemoteDebug = remoteDebug.equals("true")

            testLogging {
               if (logLevel.equals("verbose")) {
                  events "passed", "skipped", "failed", "standardOut", "standardError"
               } else {
                  events "standardError"
               }

               exceptionFormat "full"
            }

            if (enableRemoteDebug) {
               jvmArgs = ['-Xdebug', '-Xrunjdwp:server=y,transport=dt_socket,address=9999,suspend=n']
            }

            jvmArgs.add("-Xmx6g")

            ignoreFailures true
            forkEvery = forkEveryProp

            println "Setting syetem properties!"

            if (rootProject.hasProperty("username") || subproject.hasProperty("username") || project.hasProperty("username")) {
               println "bamboo.username was set to $username"
               println "bamboo.password was set to $password"
               systemProperty 'bamboo.username', "$username"
               systemProperty 'bamboo.password', "$password"
            }

            if (rootProject.hasProperty("keepScsUp") || subproject.hasProperty("keepScsUp") || project.hasProperty("keepScsUp")) {
               println "keep.scs.up was set to $keepScsUp"
               systemProperty 'keep.scs.up', "$keepScsUp"
            }

            if (rootProject.hasProperty("checkNothingChanged") || subproject.hasProperty("checkNothingChanged") || project.hasProperty("checkNothingChanged")) {
               println "check.nothing.changed.in.simulation was set to $checkNothingChanged"
               systemProperty 'check.nothing.changed.in.simulation', "$checkNothingChanged"
            }

            if (rootProject.hasProperty("showScsWindows") || subproject.hasProperty("showScsWindows") || project.hasProperty("showScsWindows")) {
               println "show.scs.windows was set to $showScsWindows"
               systemProperty 'show.scs.windows', "$showScsWindows"
            }

            if (rootProject.hasProperty("scsDataBufferSize") || subproject.hasProperty("scsDataBufferSize") || project.hasProperty("scsDataBufferSize")) {
               println "scs.dataBuffer.size was set to $scsDataBufferSize"
               systemProperty 'scs.dataBuffer.size', "$scsDataBufferSize"
            }

            if (rootProject.hasProperty("showScsYoGraphics") || subproject.hasProperty("showScsYoGraphics") || project.hasProperty("showScsYoGraphics")) {
               println "show.scs.yographics was set to $showScsYoGraphics"
               systemProperty 'show.scs.yographics', "$showScsYoGraphics"
            }

            //put last beacuse it overrides other vars
            if (rootProject.hasProperty("createVideos") || subproject.hasProperty("createVideos") || project.hasProperty("createVideos")) {
               systemProperty 'java.awt.headless', "$awtHeadless"
               println "java.awt.headless was set to $awtHeadless"
               systemProperty 'create.videos', "$createVideos"
               println "create.videos was set to $createVideos"
               systemProperty 'create.scs.videos', "$createVideos"
               println "create.scs.videos was set to $createVideos"
               systemProperty 'create.scs.gui', "$createVideos"
               println "create.scs.gui was set to $createVideos"
               // systemProperty 'show.scs.windows', "$createVideos"
               // println "show.scs.windows was set to $createVideos"

               println "trying to get videoDir"

               if (rootProject.hasProperty("videoDir") || subproject.hasProperty("videoDir") || project.hasProperty("videoDir")) {
                  systemProperty 'create.videos.dir', "$videoDir"
                  println "create.videos.dir was set to $videoDir"
               } else {
                  systemProperty 'create.videos.dir', "/root/BambooVideos/"
                  println "create.videos.dir was set to /root/BambooVideos/"
               }

               println project.properties.entrySet()*.toString().sort().toString().replaceAll(", ", "\n")
            }

            systemProperty 'use.clover', "$useClover"
            systemProperty 'openh264.license', 'accept'
            systemProperty 'bamboo.gradle', 'yes'
            include "$includeString"
         }
      }
   }

   jar {
      from(project.projectDir) {
         include 'LICENSE*txt'
      }
   }

   task sourceJar(type: Jar) {
      from sourceSets.main.allJava
   }

   publishing {
      publications {
         mavenJava(MavenPublication) {

            groupId 'us.ihmc'
            artifactId "${project.name}"
            version "${project.ext.fullVersion}"

            from components.java

            artifact sourceJar {
               classifier "sources"
            }

            pom.withXml {
               def licenseNode = asNode().appendNode('licenses').appendNode('license')
               licenseNode.appendNode('name', project.ext.licenseName)
               licenseNode.appendNode('url', project.ext.licenseURL)
            }
         }
      }
   }

   task testFast(type: Test) {
      ignoreFailures true
      include "**/*FastTestSuite.class"
   }

   task testSlow(type: Test) {
      ignoreFailures true
      include "**/*SlowTestSuite.class"
   }
}

def getDate() {
   def date = new Date()
   def formattedDate = date.format('yyyy.MM.dd')
   project.ext.date = formattedDate
}

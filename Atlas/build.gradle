buildscript {
   repositories {
      maven {
         url "https://plugins.gradle.org/m2/"
      }
      maven {
         url "http://dl.bintray.com/ihmcrobotics/maven-release"
      }
   }
   dependencies {
      classpath "gradle.plugin.us.ihmc.continuousIntegration:IHMCContinuousIntegrationGradlePlugin:0.10.8"
   }
}

apply plugin: "us.ihmc.continuousIntegration.ihmc-continuous-integration-plugin"

if (!rootProject.name.equals('ihmc-open-robotics-software'))
{
   evaluationDependsOn(':ihmc-open-robotics-software')
}

dependencies {
   testCompile group: 'junit', name: 'junit', version: '4.11'
   testCompile group: 'com.thoughtworks.xstream', name: 'xstream', version: '1.4.7'

   compile group: 'us.ihmc', name: 'euclid-core', version: '0.4.3'
   compile group: 'org.georegression', name: 'georegression', version: '0.11'
   compile group: 'org.ddogleg', name: 'ddogleg', version: '0.7'
   compile group: 'org.apache.xmlgraphics', name: 'batik-dom', version: '1.7'
   compile group: 'org.apache.ant', name: 'ant', version: '1.9.0'
   compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
   compile group: 'com.martiansoftware', name: 'jsap', version: '2.1'
   compile group: 'org.ros.rosjava_core', name: 'rosjava', version: '0.2.1'
   compile group: 'org.ejml', name: 'core', version: '0.30'
   compile group: 'org.ejml', name: 'dense64', version: '0.30'
   compile group: 'org.boofcv', name: 'io', version: '0.24.1'
   compile group: 'org.boofcv', name: 'ip', version: '0.24.1'
   compile group: 'org.boofcv', name: 'geo', version: '0.24.1'
   compile group: 'org.boofcv', name: 'calibration', version: '0.24.1'
   compile group: 'org.boofcv', name: 'visualize', version: '0.24.1'
   compile group: 'org.ros.rosjava_bootstrap', name: 'message_generation', version: '0.2.1'
   compile group: 'com.esotericsoftware.kryo', name: 'kryo', version: '2.20'
   compile group: 'us.ihmc.thirdparty.jme', name: 'jme3-core', version: '3.1.0-internal4'
   compile group: 'com.github.wendykierp', name: 'JTransforms', version: '3.1'
   compile group: 'org.ros.rosjava_messages', name: 'sensor_msgs', version: '1.11.7'
   compile group: 'org.ros.rosjava_messages', name: 'multisense_ros', version: '3.4.2'
   compile group: 'us.ihmc.thirdparty.org.opencv', name: 'opencv', version: '3.2.0-170503'
   compile 'org.ros.rosjava_messages:geometry_msgs:1.11.9'
   compile "org.boofcv:recognition:0.24.1"

   testCompile group: 'us.ihmc', name: 'ihmc-continuous-integration-framework', version: '0.9.4'

   compile project(":ihmc-humanoid-behaviors")
   compile project(":vicon")
   compile project(":common-walking-control-modules")
   compile project(":ihmc-avatar-interfaces")
   compile project(":ihmc-jmonkey-engine-toolkit")
   compile project(":ihmc-humanoid-robotics")
   compile project(":ihmc-communication")
   compile project(":ihmc-java-toolkit")
   compile project(":ihmc-commons-staging")
   compile group: 'us.ihmc', name: 'ihmc-commons', version: '0.11.0-alpha'
   compile project(":ihmc-perception")
   compile project(":ihmc-robotics-toolkit")
   compile project(":ihmc-ros-tools")
   compile project(":ihmc-whole-body-controller")
   compile project(":ihmc-robot-data-logger")
   compile project(":robotiq-hand-drivers")
   compile project(":model-file-loader")
   compile project(":sensor-processing")
   compile project(":simulation-construction-set")
   compile project(":simulation-construction-set-tools")
   compile project(":ihmc-graphics-description")
   compile project(":ihmc-robot-description")
   compile project(":ihmc-robot-models")
   compile project(":ihmc-simulation-toolkit")
   compile project(":ihmc-robot-data-visualizer")
   compile project(":ihmc-manipulation-planning")

   testCompile ihmc.getProjectTestDependency(":ihmc-robotics-toolkit")
   testCompile ihmc.getProjectTestDependency(":ihmc-commons-staging")
   testCompile group: 'us.ihmc', name: 'ihmc-commons-testing', version: '0.11.0-alpha'
   testCompile ihmc.getProjectTestDependency(":common-walking-control-modules")
   testCompile ihmc.getProjectTestDependency(":ihmc-avatar-interfaces")
   testCompile ihmc.getProjectTestDependency(":ihmc-humanoid-robotics")
   testCompile ihmc.getProjectTestDependency(":sensor-processing")
   testCompile ihmc.getProjectTestDependency(":ihmc-simulation-toolkit")
}

apply plugin: 'application'

applicationName = "IHMCAtlasAPI"
mainClassName = "us.ihmc.atlas.AtlasROSAPINetworkProcessor"
applicationDefaultJvmArgs = ["-Xmx4g"]

jar {
   manifest {
      attributes(
            "Created-By": "IHMC Gradle Build Script",
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Implementation-Vendor": "IHMC",

            "Bundle-Name": project.name,
            "Bundle-Version": project.version,
            "Bundle-License": "${project.ext.licenseURL}",
            "Bundle-Vendor": "IHMC")
   }
}

startScripts {
   outputs.upToDateWhen { false }

   doLast {
      def simUnixScriptDemo01 = file(outputDir.canonicalPath + "/${applicationName}SimulatorDemo01")
      simUnixScriptDemo01.text = unixScript.text.replace("IHMCAtlasAPI", "IHMCAtlasAPISimulator").replace("AtlasROSAPINetworkProcessor", "AtlasDemo01ROSAPISimulator")
      simUnixScriptDemo01.setExecutable(true)

      def simWindowsScriptDemo01 = file(outputDir.canonicalPath + "/${applicationName}SimulatorDemo01.bat")
      simWindowsScriptDemo01.text = windowsScript.text.replace("IHMCAtlasAPI", "IHMCAtlasAPISimulator").replace("AtlasROSAPINetworkProcessor", "AtlasDemo01ROSAPISimulator")

      def simUnixScriptFinals = file(outputDir.canonicalPath + "/${applicationName}SimulatorFinals")
      simUnixScriptFinals.text = unixScript.text.replace("IHMCAtlasAPI", "IHMCAtlasAPISimulator").replace("AtlasROSAPINetworkProcessor", "AtlasFinalsROSAPISimulator")
      simUnixScriptFinals.setExecutable(true)

      def simWindowsScriptFinals = file(outputDir.canonicalPath + "/${applicationName}SimulatorFinals.bat")
      simWindowsScriptFinals.text = windowsScript.text.replace("IHMCAtlasAPI", "IHMCAtlasAPISimulator").replace("AtlasROSAPINetworkProcessor", "AtlasFinalsROSAPISimulator")

      def simUnixScriptVisualizer = file(outputDir.canonicalPath + "/IHMCRemoteAtlasVisualizer")
      simUnixScriptVisualizer.text = unixScript.text.replace("IHMCAtlasAPI", "IHMCRemoteAtlasVisualizer").replace("AtlasROSAPINetworkProcessor", "RemoteAtlasVisualizer")
      simUnixScriptVisualizer.setExecutable(true)

      def simWindowsScriptVisualizer = file(outputDir.canonicalPath + "/IHMCRemoteAtlasVisualizer.bat")
      simWindowsScriptVisualizer.text = windowsScript.text.replace("IHMCAtlasAPI", "IHMCRemoteAtlasVisualizer").replace("AtlasROSAPINetworkProcessor", "RemoteAtlasVisualizer")

      def simUnixScriptLogger = file(outputDir.canonicalPath + "/IHMCLogger")
      simUnixScriptLogger.text = unixScript.text.replace("IHMCAtlasAPI", "IHMCLogger").replace("us.ihmc.atlas.AtlasROSAPINetworkProcessor", "us.ihmc.robotDataLogger.logger.YoVariableLoggerDispatcher")
      simUnixScriptLogger.setExecutable(true)

      def simWindowsScriptLogger = file(outputDir.canonicalPath + "/IHMCLogger.bat")
      simWindowsScriptLogger.text = windowsScript.text.replace("IHMCAtlasAPI", "IHMCLogger").replace("us.ihmc.atlas.AtlasROSAPINetworkProcessor", "us.ihmc.robotDataLogger.logger.YoVariableLoggerDispatcher")

      def simUnixScriptGazebo = file(outputDir.canonicalPath + "/IHMCAtlasGazeboController")
      simUnixScriptGazebo.text = unixScript.text.replace("IHMCAtlasAPI", "IHMCAtlasGazeboController").replace("us.ihmc.atlas.AtlasROSAPINetworkProcessor", "us.ihmc.atlas.gazebo.AtlasGazeboControllerFactory")
      simUnixScriptGazebo.setExecutable(true)

   }
}

applicationDistribution.from(startScripts.outputDir) {
   into "bin"
}

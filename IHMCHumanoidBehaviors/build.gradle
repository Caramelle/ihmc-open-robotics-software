buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "gradle.plugin.us.ihmc.gradle:ihmc-build:0.0.19"
  }
}

apply plugin: "us.ihmc.gradle.ihmc-build"

if(!rootProject.name.equals('ihmc-open-robotics-software')) { evaluationDependsOn(':ihmc-open-robotics-software') }

sourceCompatibility = 1.8
version = "${getOpenRoboticsSoftwareProject().version}"
project.ext.fullVersion = "${getOpenRoboticsSoftwareProject().ext.fullVersion}"
project.ext.vcsUrl = "${getOpenRoboticsSoftwareProject().ext.vcsUrl}"
project.ext.licenseURL = "http://www.apache.org/licenses/LICENSE-2.0.txt"
project.ext.licenseName = "Apache License, Version 2.0"
project.ext.bintrayLicenseName = "Apache-2.0"


repositories ihmc.ihmcDefaultArtifactProxies()

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven {
        url "http://artifactory.ihmc.us/artifactory/thirdparty/"
    }
}

def strings = ['ihmc', 'robotics']
ihmc.configureForIHMCOpenSourceBintrayPublish(false, "mavenJava", "maven-release", strings)

dependencies {
	testCompile group: 'junit', name: 'junit', version: '4.11'

	compile group: 'us.ihmc', name: 'euclid-core', version: '0.4.3'
	compile group: 'com.thoughtworks.xstream', name: 'xstream', version: '1.4.7'
    compile group: 'org.ejml', name: 'core', version: '0.30'
    compile group: 'org.ejml', name: 'dense64', version: '0.30'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    compile group: 'junit', name: 'junit', version: '4.11'
    compile group: 'org.georegression', name: 'georegression', version: '0.11'
    compile group: 'org.boofcv', name: 'geo', version: '0.24.1'
    compile group: 'us.ihmc', name: 'IHMCRealtime', version: '1.1.2'
    compile group: 'us.ihmc.thirdparty.org.opencv', name: 'opencv', version: '3.2.0-170503'
    compile "org.boofcv:ip:0.24.1"
    compile "org.boofcv:io:0.24.1"
    compile "org.boofcv:recognition:0.24.1"
    compile "us.ihmc:IHMCNativeLibraryLoader:1.0"
    
    testCompile group: 'us.ihmc', name: 'ihmc-continuous-integration-framework', version: '0.9.4'

	compile ihmc.getProjectDependency(":ihmc-manipulation-planning")
    compile ihmc.getProjectDependency(":ihmc-robot-models")
	compile ihmc.getProjectDependency(":ihmc-communication")
	compile ihmc.getProjectDependency(":ihmc-humanoid-robotics")
	compile ihmc.getProjectDependency(":common-walking-control-modules")
	compile ihmc.getProjectDependency(":simulation-construction-set")
	compile ihmc.getProjectDependency(":ihmc-robot-data-logger")
	compile ihmc.getProjectDependency(":sensor-processing")
	compile ihmc.getProjectDependency(":ihmc-whole-body-controller")
	compile ihmc.getProjectDependency(":ihmc-java-toolkit")
    compile ihmc.getProjectDependency(":ihmc-java-extensions")
    compile group: 'us.ihmc', name: 'ihmc-commons', version: '0.11.0-alpha'
	compile ihmc.getProjectDependency(":ihmc-robotics-toolkit")
    compile ihmc.getProjectDependency(":ihmc-perception")
    compile ihmc.getProjectDependency(":ihmc-graphics-description")
    compile ihmc.getProjectDependency(":ihmc-footstep-planning")
	
	testCompile ihmc.getProjectTestDependency(":ihmc-robotics-toolkit")
	testCompile ihmc.getProjectTestDependency(":ihmc-java-extensions")
    testCompile group: 'us.ihmc', name: 'ihmc-commons-testing', version: '0.11.0-alpha'
}

jar {
    manifest {
        attributes(
                "Created-By": "IHMC Gradle Build Script",
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "IHMC",

                "Bundle-Name": project.name,
                "Bundle-Version": project.version,
                "Bundle-License": "${project.ext.licenseURL}",
                "Bundle-Vendor": "IHMC")
    }
}
